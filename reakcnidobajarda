# Jan Bauer, Jaroslav Studenovský 8.E, 19.10.2024
# Hra na mačkání kláves

import tkinter
import tkinter.messagebox
import time
import random

##### Deklarace tříd
class App(tkinter.Tk):
    def __init__(self, titulek, sirka, vyska):
        super().__init__()
        # Definování potřebných proměnných pro správnou funkčnost programu
        self.vyska, self.sirka = vyska, sirka
        self.pocet_kol = random.randint(2, 6)
        self.timer_id = None
        self.highscore = 1000
        self.vteriny = 0
        self.start_time = 0
        self.jmeno = ""

        # nastavení titulku okna
        self.title(titulek)
        # konfigurace layoutu =================================================
        self.rowconfigure(0, weight=1, minsize=20, pad=3)
        self.rowconfigure(1, weight=1, minsize=20, pad=3)
        self.rowconfigure(2, weight=1, minsize=20, pad=3)
        self.rowconfigure(3, weight=1, minsize=548)
        self.columnconfigure(0, weight=1, minsize=50, pad=3)
        self.columnconfigure(1, weight=1, minsize=800, pad=3)

        # vytvoření plátna
        self.canvas = tkinter.Canvas(self, width=sirka, height=vyska, relief="sunken")
        self.canvas.grid(row=3, rowspan=3, column=1, sticky="n")
        # MENU ================================================================
        self.menubar = tkinter.Menu(self)
        fileMenu = tkinter.Menu(self.menubar, tearoff=0)
        fileMenu.add_command(label="Nastav jméno", command=self.okno_nastav_jmeno)
        fileMenu.add_separator()
        fileMenu.add_command(label="Ukončení", command=self.ukonci)
        self.menubar.add_cascade(label="Soubor", menu=fileMenu)

        helpMenu = tkinter.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="Help", menu=helpMenu)
        self.config(menu=self.menubar)

        # navázání událostí a jejich obsluhy
        self.bind_events()
        # vytvoření tlačítek
        self.create_buttons()
        # vytvoření nápisů
        self.create_labels()
        # zobrazení pravidel hry
        self.show_rules()
        # otevření okna pro zadání jména
        self.otevrit_nove_okno()

    def bind_events(self):
        """Navázání událostí a jejich obsluhy"""
        self.canvas.bind("q", self.ukonci)  # ukončení programu klávesou q
        self.canvas.bind("<Button-1>", self.klik)  # kliknutí myší
        self.canvas.focus_set()

    def create_buttons(self):
        """Vytvoření tlačítek"""
        self.tlacitko = tkinter.Button(self, text="Start", command=self.start)
        self.buttonquit = tkinter.Button(self, text="Quit", command=self.ukonci)
        self.tlacitko.grid(row=1, column=0, padx=3, sticky="wse")
        self.buttonquit.grid(row=3, column=0, padx=3, pady=5, sticky="wse")

    def create_labels(self):
        """Vytvoření nápisů"""
        # Jméno
        self.napis = tkinter.Label(self, text=f"Jméno: {self.jmeno}", font=("Arial", 12, "bold"), fg="white", bg="blue") 
        self.napis.grid(row=0, column=1, sticky="we")
        
        # Počet kol
        self.remaining_round = tkinter.Label(self, text=f"Zbývající kola: {self.pocet_kol}", font=("Arial", 12, "bold"), fg="white", bg="blue")
        self.remaining_round.grid(row=1, column=1, sticky="we")

        # Čas
        self.time = tkinter.Label(self, text=f"Čas: 00:{self.vteriny:02d}", font=("Arial", 12, "bold"), fg="white", bg="blue")
        self.time.grid(row=2, column=1, sticky="we")

        # Highscore
        self.highscore_show = tkinter.Label(self, text=f"Highscore: ", font=("Arial", 12, "bold"), fg="white", bg="blue")
        self.highscore_show.grid(row=6, column=1, sticky="we")

    def show_rules(self):
        """Zobrazení pravidel hry"""
        tkinter.messagebox.showinfo("Pravidla hry", "Pravidla hry:\n\n"
                                    "1. Zadejte své jméno/nick.\n"
                                    "2. Stiskněte tlačítko START pro začátek kola.\n"
                                    "3. Po náhodné době se objeví červená tečka.\n"
                                    "4. Klikněte co nejrychleji na tečku.\n"
                                    "5. Vaše reakční doba bude zobrazena.\n"
                                    "6. Nejlepší hráč a jeho skóre je zobrazeno.")

    def tik(self):
        """Obsluha časovače"""
        self.time.config(text=f"Čas: 00:{self.vteriny:02d}") # Přepisování času
        self.vteriny += 1
        self.timer_id = self.after(1000, self.tik)  # Opakování každou sekundu

    def otevrit_nove_okno(self):
        """Otevře nové okno pro změnu jména"""
        self.nove_okno = tkinter.Toplevel(self)
        self.nove_okno.title("Změna jména")
        self.nove_okno.rowconfigure(0, weight=1, minsize=35, pad=5)
        self.nove_okno.rowconfigure(1, weight=1, minsize=35, pad=5)
        self.nove_okno.columnconfigure(0, weight=1, minsize=55)
        self.nove_okno.columnconfigure(1, weight=1, minsize=55)

        # do okna vložíme label s textem
        self.label0 = tkinter.Label(self.nove_okno, text="Zadejte nové jméno:")
        self.label0.grid(row=0, column=0, padx=2, pady=2, sticky="E")

        # Vstupní pole pro nové jméno
        self.vstup_jmeno = tkinter.Entry(self.nove_okno, justify="left", width=25)
        self.vstup_jmeno.insert(0, self.jmeno)
        self.vstup_jmeno.grid(row=0, column=1, padx=2, pady=2, sticky="W")

        # Tlačítko po němž se nové jméno uloží
        tlacitko_ulozit = tkinter.Button(self.nove_okno, text="Uložit", width=8, command=self.ulozit_jmeno)
        tlacitko_ulozit.grid(row=1, column=1, padx=10)

        # Tlačítko cancel
        tlacitko_cancel = tkinter.Button(self.nove_okno, text="Zpět", width=8, command=lambda: self.nove_okno.destroy())
        tlacitko_cancel.grid(row=1, column=0, padx=10)

    def ulozit_jmeno(self):
        """Obsluha tlačítka pro uložení jména"""
        self.jmeno = self.vstup_jmeno.get()
        self.napis.config(text=f"Jméno: {self.jmeno}") # Přepíše jménu na UI
        self.nove_okno.destroy()  # Zavře nové okno po uložení
        self.pocet_kol = random.randint(2, 6) # Vygeneruje nový počet kol pro nového uživatele
        self.allow_start = True
        self.remaining_round.config(text=f"Zbývající kola: {self.pocet_kol}") # Reset počtu kol na UI

    def start(self):
        """Spustí hru"""
        # Podmínka, která ošetřuje, že tlačítko "Start" bude fungovat pouze na začátku hry
        if self.pocet_kol > 0 and self.allow_start:
            self.allow_start = False # Znemožnění podmínky
            self.after(random.randint(1000, 5000), self.zobraz)  # Zavolání metody zobraz po zpoždění

    def klik(self, event):
        """Obsluha kliknutí myší"""
        self.mys_x, self.mys_y = event.x, event.y # Uložení souřadnic v místě kliknutí
        p1, p2, p3, p4 = self.canvas.bbox("red_circle") # Uložení souřadnic červené tečky 
        
        # Souřadnice středu kruhu
        center_x = (p1 + p3) / 2
        center_y = (p2 + p4) / 2

        # Výpočet pro správné kliknutí pouze do červené oblasti kruhu
        distance_squared = (self.mys_x - center_x) ** 2 + (self.mys_y - center_y) ** 2
        
        # Podmínka pro ověření kliknutí do kruhu
        if distance_squared <= self.polomer ** 2:
            self.vteriny = 0 # Vyresetování času
            self.pocet_kol -= 1
            end_time = time.time() # Čas v době kliku myši
            result = end_time - self.start_time # Výpočet přesného reakčního času
            self.canvas.delete("red_circle")
            if self.timer_id:
                self.after_cancel(self.timer_id)  # Zrušení existujícího časovače -> Zabránění vícenásobnému volání tik()
            tkinter.messagebox.showinfo("Tvůj čas", f"Tvůj čas: {result:.2f}")
            
            # Podmínka pro zjištění nového highscore
            if result < self.highscore:
                self.highscore = result
                tkinter.messagebox.showinfo("Nové highscore", f"Dosáhl jsi nového highscore: {result:.2f}")
                self.highscore_show.config(text=f"Highscore: {self.highscore:.2f} - {self.jmeno}")
            self.remaining_round.config(text=f"Zbývající kola: {self.pocet_kol}")
            self.delay = random.randint(1000, 5000)  # Zpoždění v milisekundách (1 až 5 sekund)
            if self.pocet_kol > 0:
                self.after(self.delay, self.zobraz)  # Zavolání metody zobraz po zpoždění

    def zobraz(self):
        """Zobrazí červené kolečko"""
        self.polomer = random.randint(10, 50)
        self.x, self.y = random.randint(self.polomer, self.sirka - self.polomer), random.randint(self.polomer, self.vyska - self.polomer)
        self.tecka = self.canvas.create_oval(self.x - self.polomer, self.y - self.polomer, self.x + self.polomer, self.y + self.polomer, fill="red", tags="red_circle")
        self.start_time = time.time()  # Zapamatování času pro zobrazení přesného času v ms
        self.tik() # Spouštění časovače

    def ukonci(self, event=None):
        """Ukončení aplikace"""
        if tkinter.messagebox.askyesno("Ukončení", "Opravdu chcete ukončit aplikaci?"):
            self.destroy()
            exit(0)

    def run(self):
        """Spustí hlavní smyčku aplikace"""
        self.mainloop()

##### HLAVNÍ PROGRAM
if __name__ == "__main__":
    app = App("Hra na měření reakční doby", 800, 600)
    # rozběhneme aplikaci
    app.run()
# konec